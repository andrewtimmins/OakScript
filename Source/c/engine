// Script engine interface for module version
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <stdbool.h>
#include <time.h>
#include <kernel.h>
#include "h.memory" // remap malloc/free to module-safe versions
#include "h.engine"

#ifndef __uintptr_t_defined
typedef unsigned int uintptr_t;
#define __uintptr_t_defined
#endif

// Forward declarations from the main script engine
// These will be implemented by linking with the modified c/script
extern void reset_script_globals(void);
extern int run_script_from_source(const char *source, const char *filename);

// Global state that was previously in main()
static int engine_initialized = 0;

// Function to initialize the script engine
int init_script_engine(void) {
    if (engine_initialized) {
        return 0; // Already initialized
    }
    
    // Allocate global arrays using module-safe memory
    variables = (Variable*)mod_malloc(MAX_VARS * sizeof(Variable));
    if (!variables) {
        return 1; // Allocation failed
    }
    
    functions = (Function*)mod_malloc(MAX_VARS * sizeof(Function));
    if (!functions) {
        mod_free(variables);
        variables = NULL;
        return 1; // Allocation failed
    }
    
    // Initialize any global state here
    reset_script_globals();
    engine_initialized = 1;
    return 0;
}

// Function to cleanup the script engine
void cleanup_script_engine(void) {
    if (!engine_initialized) {
        return;
    }
    
    // Cleanup global state here
    if (variables) {
        // Clean up any string allocations in variables
        reset_script_globals();
        mod_free(variables);
        variables = NULL;
    }
    
    if (functions) {
        mod_free(functions);
        functions = NULL;
    }
    
    engine_initialized = 0;
}

// Function to run a script file (replaces the main() function)
int run_script_file(const char *filename) {
    if (!engine_initialized) {
        return -1;
    }
    
    FILE *file = fopen(filename, "r");
    if (!file) {
        printf("Error opening file: %s\n", filename);
        return 1;
    }
    
    fseek(file, 0, SEEK_END);
    long file_size = ftell(file);
    fseek(file, 0, SEEK_SET);

    char *source = mod_malloc((size_t)file_size + 1);
    if (!source) {
        printf("Memory allocation failed\n");
        fclose(file);
        return 1;
    }

    fread(source, 1, (size_t)file_size, file);
    source[file_size] = '\0';
    fclose(file);
    
    // Run the script using the main interpreter
    int result = run_script_from_source(source, filename);
    
    mod_free(source);
    return result;
}
