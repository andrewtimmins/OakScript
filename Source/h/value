#ifndef VALUE_H
#define VALUE_H

#include "h.engine"

// Value type system for expression returns
typedef enum {
    VALUE_INT,
    VALUE_FLOAT,
    VALUE_STRING,
    VALUE_BOOL,
    VALUE_HANDLE,   // For data structure handles
    VALUE_NULL,
    VALUE_ERROR     // For error propagation
} ValueType;

typedef struct Value {
    ValueType type;
    union {
        int int_val;
        float float_val;
        char* string_val;
        int bool_val;
        int handle_val;    // Object registry handle
        char* error_msg;   // Error message
    } data;
} Value;

// Value creation functions
Value value_int(int val);
Value value_float(float val);
Value value_string(const char* str);
Value value_bool(int val);
Value value_handle(int handle);
Value value_null(void);
Value value_error(const char* msg);

// Value utility functions
void value_destroy(Value* val);
Value value_copy(const Value* val);
int value_is_truthy(const Value* val);
char* value_to_string(const Value* val);
int value_to_int(const Value* val);
float value_to_float(const Value* val);

// Stack for expression evaluation
#define MAX_VALUE_STACK 256

typedef struct {
    Value values[MAX_VALUE_STACK];
    int top;
} ValueStack;

extern ValueStack expr_stack;

void stack_init(void);
void stack_push(Value val);
Value stack_pop(void);
Value stack_peek(void);
int stack_size(void);
void stack_clear(void);

#endif /* VALUE_H */
